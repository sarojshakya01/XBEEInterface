
Xbee RX interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000056e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080008c  0080008c  0000062e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c48  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f7  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003fb  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000274  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005c6  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00002a96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
  8a:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmnd>:
int received_data_counter=0;
unsigned char received_data[20];
unsigned char received;
void LCD_cmnd(unsigned char cmnd)
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0); //send upper 4 bit
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	28 2f       	mov	r18, r24
  96:	20 7f       	andi	r18, 0xF0	; 240
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); //0b11111011 //RS = 0
  9e:	da 98       	cbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  a0:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	e7 ec       	ldi	r30, 0xC7	; 199
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_cmnd+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_cmnd+0x1a>
  ac:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  ae:	db 98       	cbi	0x1b, 3	; 27
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	f3 e0       	ldi	r31, 0x03	; 3
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_cmnd+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_cmnd+0x28>
  ba:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); //send lower 4 bit
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	f0 e1       	ldi	r31, 0x10	; 16
  c0:	8f 9f       	mul	r24, r31
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	92 2f       	mov	r25, r18
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  ce:	db 9a       	sbi	0x1b, 3	; 27
  d0:	87 ec       	ldi	r24, 0xC7	; 199
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_cmnd+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_cmnd+0x48>
  da:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  dc:	db 98       	cbi	0x1b, 3	; 27
  de:	08 95       	ret

000000e0 <LCD_data>:
}
void LCD_data(unsigned char data)
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	28 2f       	mov	r18, r24
  e4:	20 7f       	andi	r18, 0xF0	; 240
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	92 2b       	or	r25, r18
  ea:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; //0b00000100 //RS = 1
  ec:	da 9a       	sbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
  ee:	db 9a       	sbi	0x1b, 3	; 27
  f0:	e7 ec       	ldi	r30, 0xC7	; 199
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_data+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_data+0x1a>
  fa:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
  fc:	db 98       	cbi	0x1b, 3	; 27
  fe:	ef e3       	ldi	r30, 0x3F	; 63
 100:	ff e1       	ldi	r31, 0x1F	; 31
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_data+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_data+0x28>
 108:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
 10a:	2b b3       	in	r18, 0x1b	; 27
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	92 2f       	mov	r25, r18
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	89 2b       	or	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
 11c:	db 9a       	sbi	0x1b, 3	; 27
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9f e1       	ldi	r25, 0x1F	; 31
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_data+0x42>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_data+0x48>
 128:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
 12a:	db 98       	cbi	0x1b, 3	; 27
 12c:	08 95       	ret

0000012e <LCD_initialize>:
}
void LCD_initialize(void)
{
	LCD_DATA_DDR = 0xFC;
 12e:	8c ef       	ldi	r24, 0xFC	; 252
 130:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111;
 132:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <LCD_initialize+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_initialize+0x16>
 144:	00 00       	nop
	_delay_ms(200);
	LCD_cmnd(0x33);
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <LCD_initialize+0x24>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_initialize+0x2e>
 15c:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x32);
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <LCD_initialize+0x3c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_initialize+0x46>
 174:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x28);
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	89 ef       	ldi	r24, 0xF9	; 249
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <LCD_initialize+0x54>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_initialize+0x5e>
 18c:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x0E);
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 ef       	ldi	r24, 0xF9	; 249
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <LCD_initialize+0x6c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_initialize+0x76>
 1a4:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x01);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_initialize+0x84>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_initialize+0x8e>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <LCD_clear>:
	_delay_ms(20);
}
void LCD_clear(void)
{
	LCD_cmnd(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	9f e1       	ldi	r25, 0x1F	; 31
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_clear+0xa>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_clear+0x10>
 1d0:	00 00       	nop
 1d2:	08 95       	ret

000001d4 <LCD_print>:
	_delay_ms(2);
}
void LCD_print(char * str)
{
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
 1dc:	88 81       	ld	r24, Y
 1de:	88 23       	and	r24, r24
 1e0:	81 f0       	breq	.+32     	; 0x202 <LCD_print+0x2e>
	LCD_cmnd(0x01);
	_delay_ms(2);
}
void LCD_print(char * str)
{
	unsigned char i=0;
 1e2:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		LCD_data(str[i]);
 1e4:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
		i++;
 1e8:	1f 5f       	subi	r17, 0xFF	; 255
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_print+0x1a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_print+0x20>
 1f4:	00 00       	nop
	_delay_ms(2);
}
void LCD_print(char * str)
{
	unsigned char i=0;
	while(str[i] != 0)
 1f6:	fe 01       	movw	r30, r28
 1f8:	e1 0f       	add	r30, r17
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	81 11       	cpse	r24, r1
 200:	f1 cf       	rjmp	.-30     	; 0x1e4 <LCD_print+0x10>
	{
		LCD_data(str[i]);
		i++;
		_delay_ms(5);
	}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	08 95       	ret

0000020a <LCD_set_curser>:
void LCD_set_curser(unsigned char y, unsigned char x)
{
	if(y==1)
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	29 f4       	brne	.+10     	; 0x218 <LCD_set_curser+0xe>
	LCD_cmnd(0x7F+x);
 20e:	86 2f       	mov	r24, r22
 210:	81 58       	subi	r24, 0x81	; 129
 212:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 216:	08 95       	ret
	else if(y==2)
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	21 f4       	brne	.+8      	; 0x224 <LCD_set_curser+0x1a>
	LCD_cmnd(0xBF+x);
 21c:	86 2f       	mov	r24, r22
 21e:	81 54       	subi	r24, 0x41	; 65
 220:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 224:	08 95       	ret

00000226 <LCD_num>:
}
void LCD_num(uint16_t num)
{
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
	LCD_data(num/100+0x30);
 230:	9c 01       	movw	r18, r24
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	36 95       	lsr	r19
 238:	27 95       	ror	r18
 23a:	ab e7       	ldi	r26, 0x7B	; 123
 23c:	b4 e1       	ldi	r27, 0x14	; 20
 23e:	0e 94 a9 02 	call	0x552	; 0x552 <__umulhisi3>
 242:	ec 01       	movw	r28, r24
 244:	d6 95       	lsr	r29
 246:	c7 95       	ror	r28
 248:	8c 2f       	mov	r24, r28
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
	num = num%100;
 250:	24 e6       	ldi	r18, 0x64	; 100
 252:	2c 9f       	mul	r18, r28
 254:	c0 01       	movw	r24, r0
 256:	2d 9f       	mul	r18, r29
 258:	90 0d       	add	r25, r0
 25a:	11 24       	eor	r1, r1
 25c:	08 1b       	sub	r16, r24
 25e:	19 0b       	sbc	r17, r25
	LCD_data(num/10 + 0x30);
 260:	98 01       	movw	r18, r16
 262:	ad ec       	ldi	r26, 0xCD	; 205
 264:	bc ec       	ldi	r27, 0xCC	; 204
 266:	0e 94 a9 02 	call	0x552	; 0x552 <__umulhisi3>
 26a:	ec 01       	movw	r28, r24
 26c:	d6 95       	lsr	r29
 26e:	c7 95       	ror	r28
 270:	d6 95       	lsr	r29
 272:	c7 95       	ror	r28
 274:	d6 95       	lsr	r29
 276:	c7 95       	ror	r28
 278:	8c 2f       	mov	r24, r28
 27a:	80 5d       	subi	r24, 0xD0	; 208
 27c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
	LCD_data(num%10 + 0x30);
 280:	ce 01       	movw	r24, r28
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	cc 0f       	add	r28, r28
 288:	dd 1f       	adc	r29, r29
 28a:	cc 0f       	add	r28, r28
 28c:	dd 1f       	adc	r29, r29
 28e:	cc 0f       	add	r28, r28
 290:	dd 1f       	adc	r29, r29
 292:	c8 0f       	add	r28, r24
 294:	d9 1f       	adc	r29, r25
 296:	c8 01       	movw	r24, r16
 298:	8c 1b       	sub	r24, r28
 29a:	9d 0b       	sbc	r25, r29
 29c:	80 5d       	subi	r24, 0xD0	; 208
 29e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <usart_initialize>:
void usart_initialize()//USART initialization//
{
	UCSRA = 0;
 2ac:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1 << RXCIE);// | (1<< UDRIE);//enable tx and rx pin and rx interupt
 2ae:	88 e9       	ldi	r24, 0x98	; 152
 2b0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ0) | (1<<UCSZ1) | (1<<URSEL); //character size 8, 1 stop bit and reg select bit = 1
 2b2:	86 e8       	ldi	r24, 0x86	; 134
 2b4:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x19; //baud rate 9600
 2b6:	89 e1       	ldi	r24, 0x19	; 25
 2b8:	89 b9       	out	0x09, r24	; 9
 2ba:	08 95       	ret

000002bc <usart_send_char>:
}

void usart_send_char(unsigned char txdata)//Function to send single character serially//
{
	while(!(UCSRA&(1<<UDRE)));
 2bc:	5d 9b       	sbis	0x0b, 5	; 11
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <usart_send_char>
	UDR = txdata;
 2c0:	8c b9       	out	0x0c, r24	; 12
 2c2:	08 95       	ret

000002c4 <usart_send_string>:
}

void usart_send_string(char *str)//Function to send string serially//
{
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
 2cc:	88 81       	ld	r24, Y
 2ce:	88 23       	and	r24, r24
 2d0:	81 f0       	breq	.+32     	; 0x2f2 <usart_send_string+0x2e>
	UDR = txdata;
}

void usart_send_string(char *str)//Function to send string serially//
{
	unsigned char i=0;
 2d2:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		usart_send_char(str[i]);
 2d4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <usart_send_char>
		i++;
 2d8:	1f 5f       	subi	r17, 0xFF	; 255
 2da:	8f e1       	ldi	r24, 0x1F	; 31
 2dc:	9e e4       	ldi	r25, 0x4E	; 78
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <usart_send_string+0x1a>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <usart_send_string+0x20>
 2e4:	00 00       	nop
}

void usart_send_string(char *str)//Function to send string serially//
{
	unsigned char i=0;
	while(str[i] != 0)
 2e6:	fe 01       	movw	r30, r28
 2e8:	e1 0f       	add	r30, r17
 2ea:	f1 1d       	adc	r31, r1
 2ec:	80 81       	ld	r24, Z
 2ee:	81 11       	cpse	r24, r1
 2f0:	f1 cf       	rjmp	.-30     	; 0x2d4 <usart_send_string+0x10>
	{
		usart_send_char(str[i]);
		i++;
		_delay_ms(5);
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	08 95       	ret

000002fa <usart_send_num>:
void usart_send_num(unsigned char number)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	c8 2f       	mov	r28, r24
	usart_send_char(number/10 + 0x30);
 300:	dd ec       	ldi	r29, 0xCD	; 205
 302:	8d 9f       	mul	r24, r29
 304:	d1 2d       	mov	r29, r1
 306:	11 24       	eor	r1, r1
 308:	d6 95       	lsr	r29
 30a:	d6 95       	lsr	r29
 30c:	d6 95       	lsr	r29
 30e:	8d 2f       	mov	r24, r29
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	0e 94 5e 01 	call	0x2bc	; 0x2bc <usart_send_char>
 316:	8f e3       	ldi	r24, 0x3F	; 63
 318:	9c e9       	ldi	r25, 0x9C	; 156
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <usart_send_num+0x20>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <usart_send_num+0x26>
 320:	00 00       	nop
	_delay_ms(10);
	usart_send_char(number%10 + 0x30);
 322:	dd 0f       	add	r29, r29
 324:	8d 2f       	mov	r24, r29
 326:	88 0f       	add	r24, r24
 328:	88 0f       	add	r24, r24
 32a:	d8 0f       	add	r29, r24
 32c:	8c 2f       	mov	r24, r28
 32e:	8d 1b       	sub	r24, r29
 330:	80 5d       	subi	r24, 0xD0	; 208
 332:	0e 94 5e 01 	call	0x2bc	; 0x2bc <usart_send_char>
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <empty_array>:
	}
}
void empty_array(int j)
{
	int i;
	for (i=0;i<j;i++)
 33c:	18 16       	cp	r1, r24
 33e:	19 06       	cpc	r1, r25
 340:	4c f4       	brge	.+18     	; 0x354 <empty_array+0x18>
 342:	e0 e9       	ldi	r30, 0x90	; 144
 344:	f0 e0       	ldi	r31, 0x00	; 0
	for (i=0;i<j;i++)
	{
		LCD_data(received_data[i]);
	}
}
void empty_array(int j)
 346:	8e 0f       	add	r24, r30
 348:	9f 1f       	adc	r25, r31
{
	int i;
	for (i=0;i<j;i++)
	{
		received_data[i]=' ';
 34a:	20 e2       	ldi	r18, 0x20	; 32
 34c:	21 93       	st	Z+, r18
	}
}
void empty_array(int j)
{
	int i;
	for (i=0;i<j;i++)
 34e:	e8 17       	cp	r30, r24
 350:	f9 07       	cpc	r31, r25
 352:	e1 f7       	brne	.-8      	; 0x34c <empty_array+0x10>
 354:	08 95       	ret

00000356 <read_battery_status>:
unsigned char temperature_value;
unsigned char battery_level;

void read_battery_status()
{
	ADCSRA = 0x87; //Enable ADC and select clk/128
 356:	87 e8       	ldi	r24, 0x87	; 135
 358:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0xE0; //0b1110000, 11 for Vref=2.56, 1 for left justified,
 35a:	80 ee       	ldi	r24, 0xE0	; 224
 35c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADSC; //Start conversion in ADC
 35e:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA & (1<<ADIF)) == 0); //till the end of conversion
 360:	34 9b       	sbis	0x06, 4	; 6
 362:	fe cf       	rjmp	.-4      	; 0x360 <read_battery_status+0xa>
	battery_level = ADCH; //save the converted output
 364:	85 b1       	in	r24, 0x05	; 5
 366:	80 93 8f 00 	sts	0x008F, r24
	//ADCSRA = 0x00;
	LCD_num(battery_level);
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 13 01 	call	0x226	; 0x226 <LCD_num>
 370:	08 95       	ret

00000372 <read_temperature>:
}

//---Temperature reading function---//
void read_temperature()
{
	ADCSRA = 0x87; //Enable ADC and select clk/128
 372:	87 e8       	ldi	r24, 0x87	; 135
 374:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0xE0; //0b1110000, 11 for Vref=2.56, 1 for left justified,
 376:	80 ee       	ldi	r24, 0xE0	; 224
 378:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADSC; //Start conversion in ADC
 37a:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA & (1<<ADIF)) == 0); //till the end of conversion
 37c:	34 9b       	sbis	0x06, 4	; 6
 37e:	fe cf       	rjmp	.-4      	; 0x37c <read_temperature+0xa>
	temperature_value = ADCH; //save the converted output
 380:	85 b1       	in	r24, 0x05	; 5
 382:	80 93 8e 00 	sts	0x008E, r24
	ADCSRA = 0x00;
 386:	16 b8       	out	0x06, r1	; 6
 388:	08 95       	ret

0000038a <main>:
}*/
//-------------------------//
int main(void)
{
	unsigned char i;
	LCD_initialize();
 38a:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_initialize>
	LCD_cmnd(0x0C);
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
	LCD_print("This is RECEIVER");
 394:	80 e6       	ldi	r24, 0x60	; 96
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
	//_delay_ms(1000);
	usart_initialize();
 39c:	0e 94 56 01 	call	0x2ac	; 0x2ac <usart_initialize>
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	9c e9       	ldi	r25, 0x9C	; 156
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <main+0x1a>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0x20>
 3aa:	00 00       	nop
	_delay_ms(10);
	usart_send_string("hello");
 3ac:	81 e7       	ldi	r24, 0x71	; 113
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <usart_send_string>
	//while(1)
	{
		LCD_clear();
 3b4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_clear>
		read_battery_status();
 3b8:	0e 94 ab 01 	call	0x356	; 0x356 <read_battery_status>
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	e9 e6       	ldi	r30, 0x69	; 105
 3c0:	f8 e1       	ldi	r31, 0x18	; 24
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	e0 40       	sbci	r30, 0x00	; 0
 3c6:	f0 40       	sbci	r31, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x38>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x42>
 3cc:	00 00       	nop
		_delay_ms(500);
	}
	sei();	
 3ce:	78 94       	sei
			for (i=0;i<received_data_counter;i++)
			{
				LCD_data(received_data[i]);
			}
			//usart_send_string("OK");
			if (received_data[0] == 104 && received_data[1] == 105)
 3d0:	c0 e9       	ldi	r28, 0x90	; 144
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	01 e9       	ldi	r16, 0x91	; 145
 3d6:	10 e0       	ldi	r17, 0x00	; 0
			{
				read_temperature();
				//read_humidity();
				humidity_value = 65;
 3d8:	0f 2e       	mov	r0, r31
 3da:	f1 e4       	ldi	r31, 0x41	; 65
 3dc:	df 2e       	mov	r13, r31
 3de:	f0 2d       	mov	r31, r0
		if (!(received_data_counter <4))
		{
			LCD_clear();
			LCD_print("Data Received!!!");
			LCD_set_curser(2,1);
			for (i=0;i<received_data_counter;i++)
 3e0:	e1 2c       	mov	r14, r1
		_delay_ms(500);
	}
	sei();	
	while(1)
	{
		LCD_clear();
 3e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_clear>
		if (!(received_data_counter <4))
 3e6:	80 91 8c 00 	lds	r24, 0x008C
 3ea:	90 91 8d 00 	lds	r25, 0x008D
 3ee:	04 97       	sbiw	r24, 0x04	; 4
 3f0:	c4 f3       	brlt	.-16     	; 0x3e2 <main+0x58>
		{
			LCD_clear();
 3f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_clear>
			LCD_print("Data Received!!!");
 3f6:	87 e7       	ldi	r24, 0x77	; 119
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
			LCD_set_curser(2,1);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_set_curser>
			for (i=0;i<received_data_counter;i++)
 406:	80 91 8c 00 	lds	r24, 0x008C
 40a:	90 91 8d 00 	lds	r25, 0x008D
 40e:	18 16       	cp	r1, r24
 410:	19 06       	cpc	r1, r25
 412:	9c f4       	brge	.+38     	; 0x43a <main+0xb0>
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	fe 2c       	mov	r15, r14
			{
				LCD_data(received_data[i]);
 41a:	fc 01       	movw	r30, r24
 41c:	e0 57       	subi	r30, 0x70	; 112
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
 420:	80 81       	ld	r24, Z
 422:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
		if (!(received_data_counter <4))
		{
			LCD_clear();
			LCD_print("Data Received!!!");
			LCD_set_curser(2,1);
			for (i=0;i<received_data_counter;i++)
 426:	f3 94       	inc	r15
 428:	8f 2d       	mov	r24, r15
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	20 91 8c 00 	lds	r18, 0x008C
 430:	30 91 8d 00 	lds	r19, 0x008D
 434:	82 17       	cp	r24, r18
 436:	93 07       	cpc	r25, r19
 438:	84 f3       	brlt	.-32     	; 0x41a <main+0x90>
			{
				LCD_data(received_data[i]);
			}
			//usart_send_string("OK");
			if (received_data[0] == 104 && received_data[1] == 105)
 43a:	88 81       	ld	r24, Y
 43c:	88 36       	cpi	r24, 0x68	; 104
 43e:	71 f5       	brne	.+92     	; 0x49c <main+0x112>
 440:	f8 01       	movw	r30, r16
 442:	80 81       	ld	r24, Z
 444:	89 36       	cpi	r24, 0x69	; 105
 446:	51 f5       	brne	.+84     	; 0x49c <main+0x112>
			{
				read_temperature();
 448:	0e 94 b9 01 	call	0x372	; 0x372 <read_temperature>
				//read_humidity();
				humidity_value = 65;
 44c:	d0 92 a4 00 	sts	0x00A4, r13
 450:	ff ef       	ldi	r31, 0xFF	; 255
 452:	23 ed       	ldi	r18, 0xD3	; 211
 454:	80 e3       	ldi	r24, 0x30	; 48
 456:	f1 50       	subi	r31, 0x01	; 1
 458:	20 40       	sbci	r18, 0x00	; 0
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <main+0xcc>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <main+0xd6>
 460:	00 00       	nop
				_delay_ms(1000);
				usart_send_num(temperature_value);
 462:	80 91 8e 00 	lds	r24, 0x008E
 466:	0e 94 7d 01 	call	0x2fa	; 0x2fa <usart_send_num>
 46a:	ef e3       	ldi	r30, 0x3F	; 63
 46c:	fc e9       	ldi	r31, 0x9C	; 156
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <main+0xe4>
 472:	00 c0       	rjmp	.+0      	; 0x474 <main+0xea>
 474:	00 00       	nop
				_delay_ms(10);
				usart_send_char(' ');
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	0e 94 5e 01 	call	0x2bc	; 0x2bc <usart_send_char>
				usart_send_num(humidity_value);
 47c:	80 91 a4 00 	lds	r24, 0x00A4
 480:	0e 94 7d 01 	call	0x2fa	; 0x2fa <usart_send_num>
 484:	8f e3       	ldi	r24, 0x3F	; 63
 486:	9c e9       	ldi	r25, 0x9C	; 156
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <main+0xfe>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x104>
 48e:	00 00       	nop
				_delay_ms(10);
				usart_send_char('\n');
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	0e 94 5e 01 	call	0x2bc	; 0x2bc <usart_send_char>
				usart_send_char('\r');
 496:	8d e0       	ldi	r24, 0x0D	; 13
 498:	0e 94 5e 01 	call	0x2bc	; 0x2bc <usart_send_char>
 49c:	9f ef       	ldi	r25, 0xFF	; 255
 49e:	e3 ed       	ldi	r30, 0xD3	; 211
 4a0:	f0 e3       	ldi	r31, 0x30	; 48
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	e0 40       	sbci	r30, 0x00	; 0
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <main+0x118>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x122>
 4ac:	00 00       	nop
			}
			_delay_ms(1000);
			empty_array(received_data_counter);
 4ae:	80 91 8c 00 	lds	r24, 0x008C
 4b2:	90 91 8d 00 	lds	r25, 0x008D
 4b6:	0e 94 9e 01 	call	0x33c	; 0x33c <empty_array>
			received_data_counter=0;
 4ba:	10 92 8d 00 	sts	0x008D, r1
 4be:	10 92 8c 00 	sts	0x008C, r1
			sei(); //Reenable interrupt
 4c2:	78 94       	sei
 4c4:	8e cf       	rjmp	.-228    	; 0x3e2 <main+0x58>

000004c6 <__vector_13>:
	}
}


ISR(USART_RXC_vect)
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	received_char = UDR;
 4e8:	8c b1       	in	r24, 0x0c	; 12
 4ea:	80 93 a5 00 	sts	0x00A5, r24
	LCD_print("hi");
 4ee:	88 e8       	ldi	r24, 0x88	; 136
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_print>
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	83 ed       	ldi	r24, 0xD3	; 211
 4fa:	90 e3       	ldi	r25, 0x30	; 48
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__vector_13+0x36>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__vector_13+0x40>
 506:	00 00       	nop
	_delay_ms(1000);
	if(received_data_counter < 4)
 508:	80 91 8c 00 	lds	r24, 0x008C
 50c:	90 91 8d 00 	lds	r25, 0x008D
 510:	84 30       	cpi	r24, 0x04	; 4
 512:	91 05       	cpc	r25, r1
 514:	64 f4       	brge	.+24     	; 0x52e <__vector_13+0x68>
	{
		received_data[received_data_counter]=received_char;
 516:	fc 01       	movw	r30, r24
 518:	e0 57       	subi	r30, 0x70	; 112
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	20 91 a5 00 	lds	r18, 0x00A5
 520:	20 83       	st	Z, r18
		received_data_counter++;
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	90 93 8d 00 	sts	0x008D, r25
 528:	80 93 8c 00 	sts	0x008C, r24
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__vector_13+0x6a>
	}
	else
	{
		//received_data_counter = -1;
		cli(); //disable interrupt
 52e:	f8 94       	cli
	}
	
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__umulhisi3>:
 552:	a2 9f       	mul	r26, r18
 554:	b0 01       	movw	r22, r0
 556:	b3 9f       	mul	r27, r19
 558:	c0 01       	movw	r24, r0
 55a:	a3 9f       	mul	r26, r19
 55c:	01 d0       	rcall	.+2      	; 0x560 <__umulhisi3+0xe>
 55e:	b2 9f       	mul	r27, r18
 560:	70 0d       	add	r23, r0
 562:	81 1d       	adc	r24, r1
 564:	11 24       	eor	r1, r1
 566:	91 1d       	adc	r25, r1
 568:	08 95       	ret

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
