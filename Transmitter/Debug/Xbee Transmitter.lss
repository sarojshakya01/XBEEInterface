
Xbee Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  0080006c  0080006c  0000039a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000aff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000090  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a8c  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000020f  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000392  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000150  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000022d  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000037b  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 33       	cpi	r26, 0x36	; 54
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 01 	call	0x266	; 0x266 <main>
  8a:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmnd>:
unsigned char received_data[200];

//---LCD Code starts from here---//
void LCD_cmnd(unsigned char cmnd)
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0); //send upper 4 bit
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	28 2f       	mov	r18, r24
  96:	20 7f       	andi	r18, 0xF0	; 240
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); //0b11111011 //RS = 0
  9e:	da 98       	cbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  a0:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	e7 ec       	ldi	r30, 0xC7	; 199
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_cmnd+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_cmnd+0x1a>
  ac:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  ae:	db 98       	cbi	0x1b, 3	; 27
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	f3 e0       	ldi	r31, 0x03	; 3
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_cmnd+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_cmnd+0x28>
  ba:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); //send lower 4 bit
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	f0 e1       	ldi	r31, 0x10	; 16
  c0:	8f 9f       	mul	r24, r31
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	92 2f       	mov	r25, r18
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  ce:	db 9a       	sbi	0x1b, 3	; 27
  d0:	87 ec       	ldi	r24, 0xC7	; 199
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_cmnd+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_cmnd+0x48>
  da:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  dc:	db 98       	cbi	0x1b, 3	; 27
  de:	08 95       	ret

000000e0 <LCD_data>:
}
void LCD_data(unsigned char data)
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	28 2f       	mov	r18, r24
  e4:	20 7f       	andi	r18, 0xF0	; 240
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	92 2b       	or	r25, r18
  ea:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; //0b00000100 //RS = 1
  ec:	da 9a       	sbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
  ee:	db 9a       	sbi	0x1b, 3	; 27
  f0:	e7 ec       	ldi	r30, 0xC7	; 199
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_data+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_data+0x1a>
  fa:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
  fc:	db 98       	cbi	0x1b, 3	; 27
  fe:	ef e3       	ldi	r30, 0x3F	; 63
 100:	ff e1       	ldi	r31, 0x1F	; 31
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_data+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_data+0x28>
 108:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
 10a:	2b b3       	in	r18, 0x1b	; 27
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	92 2f       	mov	r25, r18
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	89 2b       	or	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
 11c:	db 9a       	sbi	0x1b, 3	; 27
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9f e1       	ldi	r25, 0x1F	; 31
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_data+0x42>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_data+0x48>
 128:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
 12a:	db 98       	cbi	0x1b, 3	; 27
 12c:	08 95       	ret

0000012e <LCD_initialize>:
}
void LCD_initialize(void)
{
	LCD_DATA_DDR = 0xFC;
 12e:	8c ef       	ldi	r24, 0xFC	; 252
 130:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111;
 132:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <LCD_initialize+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_initialize+0x16>
 144:	00 00       	nop
	_delay_ms(200);
	LCD_cmnd(0x33);
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <LCD_initialize+0x24>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_initialize+0x2e>
 15c:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x32);
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <LCD_initialize+0x3c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_initialize+0x46>
 174:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x28);
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	89 ef       	ldi	r24, 0xF9	; 249
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <LCD_initialize+0x54>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_initialize+0x5e>
 18c:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x0E);
 18e:	8e e0       	ldi	r24, 0x0E	; 14
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 ef       	ldi	r24, 0xF9	; 249
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <LCD_initialize+0x6c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_initialize+0x76>
 1a4:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x01);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_initialize+0x84>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_initialize+0x8e>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <LCD_print>:
{
	LCD_cmnd(0x01);
	_delay_ms(2);
}
void LCD_print(char * str)
{
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	81 f0       	breq	.+32     	; 0x1ee <LCD_print+0x2e>
	LCD_cmnd(0x01);
	_delay_ms(2);
}
void LCD_print(char * str)
{
	unsigned char i=0;
 1ce:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		LCD_data(str[i]);
 1d0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_data>
		i++;
 1d4:	1f 5f       	subi	r17, 0xFF	; 255
 1d6:	8f e1       	ldi	r24, 0x1F	; 31
 1d8:	9e e4       	ldi	r25, 0x4E	; 78
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_print+0x1a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_print+0x20>
 1e0:	00 00       	nop
	_delay_ms(2);
}
void LCD_print(char * str)
{
	unsigned char i=0;
	while(str[i] != 0)
 1e2:	fe 01       	movw	r30, r28
 1e4:	e1 0f       	add	r30, r17
 1e6:	f1 1d       	adc	r31, r1
 1e8:	80 81       	ld	r24, Z
 1ea:	81 11       	cpse	r24, r1
 1ec:	f1 cf       	rjmp	.-30     	; 0x1d0 <LCD_print+0x10>
	{
		LCD_data(str[i]);
		i++;
		_delay_ms(5);
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <usart_initialize>:
	LCD_data(num%10 + 0x30);
}
//---LCD Code ends here---//
void usart_initialize()//USART initialization//
{
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE); //enable tx and rx pin
 1f6:	88 e9       	ldi	r24, 0x98	; 152
 1f8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ0) | (1<<UCSZ1) | (1<<URSEL); //character size 8, 1 stop bit and reg select bit = 1
 1fa:	86 e8       	ldi	r24, 0x86	; 134
 1fc:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x67; //baud rate 9600
 1fe:	87 e6       	ldi	r24, 0x67	; 103
 200:	89 b9       	out	0x09, r24	; 9
 202:	08 95       	ret

00000204 <usart_send_char>:
}
void usart_send_char(unsigned char txdata)//Function to send single character serially//
{
	while(!(UCSRA&(1<<UDRE)));
 204:	5d 9b       	sbis	0x0b, 5	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <usart_send_char>
	UDR = txdata;
 208:	8c b9       	out	0x0c, r24	; 12
 20a:	08 95       	ret

0000020c <usart_send_num>:
		i++;
		_delay_ms(5);
	}
}
void usart_send_num(unsigned char number)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	c8 2f       	mov	r28, r24
	usart_send_char(number/10 + 0x30);
 212:	dd ec       	ldi	r29, 0xCD	; 205
 214:	8d 9f       	mul	r24, r29
 216:	d1 2d       	mov	r29, r1
 218:	11 24       	eor	r1, r1
 21a:	d6 95       	lsr	r29
 21c:	d6 95       	lsr	r29
 21e:	d6 95       	lsr	r29
 220:	8d 2f       	mov	r24, r29
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	0e 94 02 01 	call	0x204	; 0x204 <usart_send_char>
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	9c e9       	ldi	r25, 0x9C	; 156
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <usart_send_num+0x20>
 230:	00 c0       	rjmp	.+0      	; 0x232 <usart_send_num+0x26>
 232:	00 00       	nop
	_delay_ms(delay_tx);
	usart_send_char(number%10 + 0x30);
 234:	dd 0f       	add	r29, r29
 236:	8d 2f       	mov	r24, r29
 238:	88 0f       	add	r24, r24
 23a:	88 0f       	add	r24, r24
 23c:	d8 0f       	add	r29, r24
 23e:	8c 2f       	mov	r24, r28
 240:	8d 1b       	sub	r24, r29
 242:	80 5d       	subi	r24, 0xD0	; 208
 244:	0e 94 02 01 	call	0x204	; 0x204 <usart_send_char>
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <read_temperature>:
unsigned char temperature_value;

//---Temperature reading function---//
void read_temperature()
{
	ADCSRA = 0x87; //Enable ADC and select clk/128
 24e:	87 e8       	ldi	r24, 0x87	; 135
 250:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0xE0; //0b1110000, 11 for Vref=2.56, 1 for left justified,
 252:	80 ee       	ldi	r24, 0xE0	; 224
 254:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADSC; //Start conversion in ADC
 256:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA & (1<<ADIF)) == 0); //till the end of conversion
 258:	34 9b       	sbis	0x06, 4	; 6
 25a:	fe cf       	rjmp	.-4      	; 0x258 <read_temperature+0xa>
	temperature_value = ADCH; //save the converted output
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	80 93 6c 00 	sts	0x006C, r24
	ADCSRA = 0x00;
 262:	16 b8       	out	0x06, r1	; 6
 264:	08 95       	ret

00000266 <main>:
}*/
//-------------------------//

int main(void)
{
	LCD_initialize();
 266:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_initialize>
	LCD_cmnd(0x0C);
 26a:	8c e0       	ldi	r24, 0x0C	; 12
 26c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
	LCD_print("TRANSMITTER");
 270:	80 e6       	ldi	r24, 0x60	; 96
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_print>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	87 ea       	ldi	r24, 0xA7	; 167
 27c:	91 e6       	ldi	r25, 0x61	; 97
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x18>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x22>
 288:	00 00       	nop
	_delay_ms(2000);
	usart_initialize();
 28a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <usart_initialize>
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	89 ef       	ldi	r24, 0xF9	; 249
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x2e>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x38>
 29e:	00 00       	nop
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	89 ef       	ldi	r24, 0xF9	; 249
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x40>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x4a>
 2b0:	00 00       	nop
	_delay_ms(20);
	//usart_send_string("+++");
	_delay_ms(20);
	while(1)
	{
		read_temperature();
 2b2:	0e 94 27 01 	call	0x24e	; 0x24e <read_temperature>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	90 e3       	ldi	r25, 0x30	; 48
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x56>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x60>
 2c6:	00 00       	nop
		//read_humidity();
		//LCD_clear();
		//LCD_num(temperature_value);
		//LCD_num(humidity_value);
		_delay_ms(1000);
		usart_send_num(temperature_value);
 2c8:	80 91 6c 00 	lds	r24, 0x006C
 2cc:	0e 94 06 01 	call	0x20c	; 0x20c <usart_send_num>
 2d0:	8f e3       	ldi	r24, 0x3F	; 63
 2d2:	9c e9       	ldi	r25, 0x9C	; 156
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x6e>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x74>
 2da:	00 00       	nop
		_delay_ms(delay_tx);
		usart_send_char(0xDF);
 2dc:	8f ed       	ldi	r24, 0xDF	; 223
 2de:	0e 94 02 01 	call	0x204	; 0x204 <usart_send_char>
 2e2:	8f e3       	ldi	r24, 0x3F	; 63
 2e4:	9c e9       	ldi	r25, 0x9C	; 156
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x80>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x86>
 2ec:	00 00       	nop
		_delay_ms(delay_tx);
		usart_send_char('C');
 2ee:	83 e4       	ldi	r24, 0x43	; 67
 2f0:	0e 94 02 01 	call	0x204	; 0x204 <usart_send_char>
 2f4:	de cf       	rjmp	.-68     	; 0x2b2 <main+0x4c>

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
